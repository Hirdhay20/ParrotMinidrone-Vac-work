%implements s25_b0_t8dxj_3_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real32_T agkqn4nexv;
%closefile localVarDecl
%assign _modelSS = ""

%<SLibGenerateExtModeOutput(system)>
/* {S!d15}Outputs for Enabled SubSystem: '<S348>/Enabled Subsystem' incorporates:
 *  EnablePort: '<S374>/Enable'
 */
if (kzkbyvleau) {
    localDW->di3vx4yz3h = true;
    /* {S!d18}Sum: '<S374>/Add1' incorporates:
 *  Product: '<S374>/Product'
 */
    agkqn4nexv = fs2feg20ha - (alvjm4ynrj[0] * gqvbt0r13r[0] + alvjm4ynrj[1] * gqvbt0r13r[1]);
    /* {S!d20}Product: '<S374>/Product2' */
    localB->jr33ft2rwp[0] = ffgfphqqtr[0] * agkqn4nexv;
    localB->jr33ft2rwp[1] = ffgfphqqtr[1] * agkqn4nexv;
    srUpdateBC(localDW->ey1udbrupy);
} else if (localDW->di3vx4yz3h) {
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[8], "Disable",0)
%if SLibCG_SystemFcnArgAccessed("oqgq3mpzza",8,0)
%<SLibCG_AccessArg(3 ,2, 0)>
%endif
%if SLibCG_SystemFcnArgAccessed("oqgq3mpzza",8,1)
%<SLibCG_AccessArg(3 ,2, 6)>
%endif
%if SLibCG_SystemFcnArgAccessed("oqgq3mpzza",8,2)
%<SLibCG_AccessArg(3 ,2, 7)>
%endif
%if SLibCG_SystemFcnArgAccessed("oqgq3mpzza",8,3)
%<SLibCG_AccessArg(3 ,2, 8)>
%endif

%<SLibCGIRGenReusableSysCall("oqgq3mpzza", ["%<::tSimStruct>", "localB", "localDW", "localP"], 8, 0, 14, 0, 6, 8)>\
%assign ss = ::CompiledModel.System[8]
%if !LibSystemIsInlined(ss)
;
%else
\
%endif
%endif
}
/* {E!d15}End of Outputs for SubSystem: '<S348>/Enabled Subsystem' */
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[3].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(3, 2, 0)>
%endif
%if SLibCG_ArgAccessed(3, 2, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(3, 2, 0)>
%endif
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void auyrlkczqp(\
%assign comma = ""
%if SLibCG_ArgAccessed(3, 2, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("auyrlkczqp", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>boolean_T kzkbyvleau\
%assign comma = ", "
%<comma>const real32_T ffgfphqqtr[2]\
%assign comma = ", "
%<comma>const real32_T alvjm4ynrj[2]\
%assign comma = ", "
%<comma>real32_T fs2feg20ha\
%assign comma = ", "
%<comma>const real32_T gqvbt0r13r[2]\
%assign comma = ", "
%<comma>emdxw3n5sf *localB\
%assign comma = ", "
%<comma>d4zn51d524 *localDW\
%assign comma = ", "
%<comma>j42asjzg5g *localP\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(3, 2, fcnProtoType)>
%endfunction
